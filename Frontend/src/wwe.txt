"Project Files:\n\nThe following is a list of all project files and their complete contents that are currently visible and accessible to you.\n\neslint.config.js:\n```\nimport js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);\n\n```\n\nindex.html:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n\n```\n\npackage.json:\n```\n{\n  \"name\": \"vite-react-typescript-starter\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"lucide-react\": \"^0.344.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.9.1\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.18\",\n    \"eslint\": \"^9.9.1\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.11\",\n    \"globals\": \"^15.9.0\",\n    \"postcss\": \"^8.4.35\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5.5.3\",\n    \"typescript-eslint\": \"^8.3.0\",\n    \"vite\": \"^5.4.2\"\n  }\n}\n\n```\n\npostcss.config.js:\n```\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n\n```\n\nsrc/App.tsx:\n```\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\n      <p>Start prompting (or editing) to see magic happen :)</p>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\nsrc/index.css:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n```\n\nsrc/main.tsx:\n```\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n```\n\nsrc/vite-env.d.ts:\n```\n/// <reference types=\"vite/client\" />\n\n```\n\ntailwind.config.js:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n\n```\n\ntsconfig.app.json:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"]\n}\n\n```\n\ntsconfig.json:\n```\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}\n\n```\n\ntsconfig.node.json:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n\n```\n\nvite.config.ts:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  optimizeDeps: {\n    exclude: ['lucide-react'],\n  },\n});\n\n```\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n  - .bolt/prompt"


"For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\nBy default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\nUse icons from lucide-react for logos.\n\nUse stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags."








You have to create a working ${userInput} website using dependencies:-${dependencies} with a moderate level of functionality, modern UI/UX, and clean architecture.

  ### Requirements & Conditions:- do not write too many lines of code just make website look best and add one or two funtionality in it only 


  Essential Features:
  
  - Do not import any other libraries or frameworks unless it is mentioned in dependencies.
  - Include Home, About, and other minor components.
  - If it’s an e-commerce website, add a cart, product card, banner section, etc.
  - If it’s another type of website, implement relevant features accordingly.
  - Use only Tailwind CSS for styling. Do not use raw CSS. Do not make component CSS files.
  - IMPORTANT: Do not make a high-end website; keep it basic with basic components only.
  - IMPORTANT: Do not use react-router-dom in any way or in any website.
  
  ### File Structure (Compulsory):
  src/
  ├── App.jsx
  ├── App.css
  ├── main.jsx
  ├── index.css
  ├── components/
      ├── (or relevant component files)

  ### Code Structure Rules:
  Strictly follow the structure:
  {"src": {
    "directory": {
      "App.jsx": {
        "file": {}
      },
      "App.css": {
        "file": {}
      },
      "components": {
        "directory": {
          /* Component files go here */
        }
      },
      "index.css": {
        "file": {
          "contents": "@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n"
        }
      },
      "main.jsx": {
        "file": {
          "contents": import './index.css'
        }
      }
    }
  }}

  ### Do not use:
  ❌ const files = {}
  ❌ Any Markdown syntax (e.g.,\`\`\`json\`, \`\`\`javascript\`)
  ❌ Unescaped newlines (use \\n instead).
  - Use double quotes (") for strings inside the like output.
  - Escape all newlines (\\n) to prevent formatting errors.
  - Escape all double quotes (") inside string values as \\".
  ❌"main.jsx": {
    "file": {
      "contents": "import './main.css'}} do not import main.css in main.jsx}}
  ❌ Do not use css files in the project for writting project except App.css and index.css

  ### UI/UX & Styling:
  1)Modern and engaging design.
  2)Use Tailwind CSS (Compulsory): Add @tailwind base; @tailwind components; @tailwind utilities; inside index.css.
  3)Mobile-first responsive design.
  4)All the pages of website must have 100vh and 100vw so that footer will not collapse with the header and vice versa.
  5)Always use IMAGES so that website looks more attractive.
  6)Make Header at the top of the page and footer at the bottom of the page.
  7)Always use Tailwind CSS classes for styling.
  8)Body of the website should be in the middle of the page and having many beautiful images and text if requires. Do not use images in Todo website only
  9)use this url for images -> https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&q=80 


  ### Code Quality:
  ✔ Component-based architecture.
  ✔ Proper indentation, opening & closing brackets.
  ✔ No missing imports.
  ✔ Ensure correct directory structure in imports.
  ✔ Optimize for performance and readability.
  ✔ Use Tailwind CSS for styling.
  ✔ Ensure that all import statements strictly match the generated file structure. If a file is imported, it must exist in the output. Do not generate imports for files that are not created. Validate every import path to avoid missing file errors.
  ✔ When creating or exporting components in JavaScript/React files, always ensure that the component is exported as a default export (using export default) if it is being imported as a default import. Alternatively, if using named exports, ensure the import statement matches the exact name of the exported component.
  ✔ In main.jsx, always import index.css using import "./index.css"; at the top. After this import, ensure the rest of the code for main.jsx is correctly written without being omitted or replaced.
  ✔ To import .css file youu have to write onlt import "./{fileName}.css";

  ### Syntax Rules:
  - Do not use $ {} for variable interpolation; use {} instead.
  - Example: Write {product.price} instead of $ {product.price}.
  - Do not create this type of error -> Failed to resolve import "../../index.css" from "src/components/TodoForm.jsx". Does the file exist?
  - Ensure all imports like  {import "../../index.css"}  in components point to the correct path. If  index.css  is located in the { src  directory, use  import "../index.css"}  instead, or adjust based on your structure.
  - Do not create this type of error -> Expected ',' or '}' after property value in JSON at position 1996 (line 13 column 345) in the code.
  *Fix for Expected ',' or '}' after property value in JSON**: 
    - **Do not leave trailing commas** after the last element in an object or array.
    - Correct example: 
      
      "App.jsx": {
        "file": {}
      },
      "App.css": {
        "file": {}
      }

    - Incorrect example:
      
      "App.jsx": {
        "file": {}
      },
      "App.css": {
        "file": {}
      },
       (trailing comma)

  - Do not create this type of error -> ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot.

  ### Review Before Submission:
  ✔ Ensure zero syntax errors and no missing imports.
  ✔ Verify UI elements load properly with no broken styles or navigation issues.
  ✔ Do not import main.css in main.jsx; instead import index.css in main.jsx.

  ### Image Assets:
  Use high-quality Unsplash images:
  https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&q=80
  Make sure all images load properly in the components.

  ### Example File Structure & Output Format:

  {"src": {
    "directory": {
      "App.jsx": {
        "file": {
          "contents": "all the code here inside backticks"
        }
      },
      "App.css": {
        "file": {
          "contents": "all the code here inside backticks"
        }
      },
      "components": {
        "directory": {
          "Header.jsx": {
            "file": {
              "contents": "all the code here inside backticks"
            }
          },
          "Footer.jsx": {
            "file": {
              "contents": "all the code here inside backticks"
            }
          }
          // other components
        }
      },
      "index.css": {
        "file": {
          "contents": "@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n"
        }
      },
      "main.jsx": {
        "file": {
          "contents": "all the code here inside backticks"
        }
      }
    }
  }}

  ### Fixes in This Version:
  ✅ Escaped all newlines (\\n) correctly.
  ✅ Escaped all double quotes (") inside JSON values.
  ✅ No trailing commas (,).
  ✅ Proper nesting of {} and [] to prevent structure issues.
  ✅ String literals (multi-line) must escape newlines correctly with \\n.
  ✅ Avoid any unescaped control characters inside strings.

  ### This ensures:
  ✔ Well-structured files.
  ✔ Complete functionality.
  ✔ No syntax errors.
  ✔ Proper imports & component usage.
  ✔ High-quality design & responsiveness.
  ✔ Always import index.css in the main.jsx file.

  ### Error-Free Code Generation (Critical Section):
  To ensure the output is error-free and adheres to strict JSON formatting rules:

  Double-Quoted Property Names:
  All keys in the JSON object must be enclosed in double quotes ("), e.g., "src", "directory", "file".
  Example: "App.jsx": {"file": {}} (Correct) vs. App.jsx: {"file": {}} (Incorrect).

  Escaping Special Characters:
  Escape all double quotes (") inside string values as \\".
  Escape all newlines (\\n) to prevent formatting errors.
  Example: "contents": "import React from 'react';\\n\\nfunction App() {\\n return <div>Hello World</div>;}".

  No Trailing Commas:
  Do not include trailing commas after the last element in objects or arrays.
  Example: Correct → "App.jsx": {"file": {}}, "App.css": {"file": {}}. Incorrect → "App.jsx": {"file": {}},.

  Proper Nesting:
  Ensure all objects and arrays are properly nested and closed with matching braces {} or brackets [].
  Example: Correct → "directory": {"App.jsx": {"file": {}}}. Incorrect → "directory": {"App.jsx": {"file": {}}.

  Validation:
  Before submitting the output, validate the structure using a validator tool (e.g., https://jsonlint.com/) to ensure there are no syntax errors.

  ### Strict Rule for react-router-dom Usage:
  To avoid errors related to react-router-dom (e.g., Switch not being exported in v6):
  Use Only react-router-dom v6:
  Replace Switch with Routes.
  Use Route for defining routes.
  Use Link for navigation links.

  Validation:
  Ensure that all imports from react-router-dom are compatible with v6.
  Avoid outdated components like Switch or incorrect usage of Route.

  ### Strict Rule for Default Exports/Imports:
  To avoid errors related to missing or incorrect default exports:

  Default Export in Components:
  Every component file (e.g., Header.jsx, Footer.jsx, App.jsx) must have a default export.

  Validation:
  Ensure that every file exporting a component uses export default.
  Ensure that every file importing a component uses the correct default import syntax.

  ### Strict Rule for Escaping Special Characters:
  To avoid errors like "Bad control character in string literal," ensure the following:

  1) Escape Double Quotes ("):
  All double quotes inside string values must be escaped as \\".
  Example: "contents": "import React from 'react';\\n\\nfunction App() {\\n  return <div className=\\"App\\">Hello World</div>;}"

  2) Escape Newlines (\\n):
  Replace actual newline characters with \\n to ensure proper formatting.
  Example: "contents": "import React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;}"

  3) Avoid Invalid Control Characters:
  Ensure no invalid control characters (e.g., raw \\t, \\r, or unescaped newlines) are included in the string.
  Example of invalid: "contents": "import React from 'react'; function App() { return <div>Hello World</div>; }"
  Correct: "contents": "import React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;}"
  
  4) Validation:
  Before submitting the output, validate the structure using a validator tool (e.g., https://jsonlint.com/) to ensure there are no syntax errors.
  
  5) JSON formatting:
  Check if the code is in the proper JSON format or not. If not, remove the code and write the

syntax
  ### Expected Output:

  {"src": {
    "directory": {
      "App.jsx": {
        "file": {
          "

      contents: all the code here inside backticks 
    }},
    "App.css": {"file": {
      contents: all the code here inside backticks 
    }},
    "components": {"directory": {
      "Header.jsx": {"file": {
        contents: all the code here inside backticks 
      }},
      "Footer.jsx": {"file": {
        contents: all the code here inside backticks 
      }} … many more files 
    }},
    "index.css": {"file": {"contents": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"}},
    "main.jsx": {"file": {
      contents: all the code here inside backticks 
    }}
  }}}

  ###  i am working on stackblitz webcontainer so refer that also before generating file ,folder structure and file contents


              IMPORTANT:- When creating or exporting components in JavaScript/React files, always ensure that the component is exported as a default export (using export default) if it is being imported as a default import. Alternatively, if using named exports, ensure the import statement matches the exact name of the exported component.

              "For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\nBy default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\nUse icons from lucide-react for logos.\n\nUse stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags."

  

  Now make ${userInput} website 